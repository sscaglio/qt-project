BLACK BOX ARCH

 
BoundChecker<T>

metodi:

-> addConsistent(parametrico,statico)
-> subConsistent(parametrico,statico)
-> mulConsistent(parametrico,statico)
-> divConsistent(parametrico,statico)

addConsistent(parametrico,statico)

sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
impossibile

dim A = 1,B = 1:
A is null -> F
B is null -> F
(A > 0 , B > 0), A + B > LIMITE_SUP -> F
(A > 0 , B < 0), A < B, A + B < LIMITE_INF -> F
(A < 0 , B < 0), A + B < LIMITE_INF -> F

T ALTRIMENTI

dim A > 1,B > 1 :
impossibile

subConsistent(parametrico,statico)

sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
impossibile

dim A = 1,B = 1:
A is null -> F
B is null -> F
(A > 0 , B > 0),A < B, A - B < LIMITE_INF -> F
(A < 0 , B > 0), A - B < LIMITE_INF -> F
(A > 0 , B < 0), A - B < LIMITE_SUP -> F
T ALTRIMENTI

dim A > 1,B > 1 :
impossibile

mulConsistent(parametrico,statico)

sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
impossibile

dim A = 1,B = 1:
A is null -> F
B is null -> F
(A > 0 , B > 0), A * B > LIMITE_SUP -> F  
(A < 0 , B < 0), A * B > LIMITE_SUP -> F
(A > 0 , B < 0), A * B < LIMITE_INF -> F
(A < 0 , B > 0), A * B < LIMITE_INF -> F
T ALTRIMENTI


dim A > 1,B > 1 :
impossibile 


divConsistent(parametrico,statico)

NB : presta attenzione a tipo RAZIONALE(possibili overflow )

sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
impossibile

dim A = 1,B = 1:
A is null -> F
B is null -> F
B = 0 -> F

T ALTRIMENTI

  
dim A > 1,B > 1 :
impossibile


VettoreConcreto


VettoreConcreto::Operazioni Algebriche


metodi

-> operator+ 
-> operator- 
-> operator* 
-> operator* scalare 
-> operator/ 


operator+  

Sia A,B input, 0 vettore nullo

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, B = 1:
    A isEmpty or isNull , B !isEmpty or !isNull -> B
    A !isEmpty or !isNull , B isEmpty or isNull -> A
    A isEmpty or isNull , B isEmpty or isNull -> 0
    A !isEmpty or !isNull , B !isEmpty or !isNull
    esiste coppia (a,b) in A,B |
    	        (a,b) addConsistent = F -> eccezione
    !(esiste coppia (a,b) in A,B |
    	        (a,b) addConsistent = F) -> somma |
    		      somma e' somma di A e B

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile
    

operator- 

Sia A,B input, 0 vettore nullo

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, B = 1:
    A isEmpty or isNull , B !isEmpty or !isNull -> B
    A !isEmpty or !isNull , B isEmpty or isNull -> A
    A isEmpty or isNull , B isEmpty or isNull -> 0
    A !isEmpty or !isNull , B !isEmpty or !isNull
    esiste coppia (a,b) in A,B |
    	        (a,b) subConsistent = F -> eccezione
    !(esiste coppia (a,b) in A,B |
    	        (a,b) subConsistent = F) -> differenza |
    		      differenza e' differenza di A e B


dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile
    

operator* 

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, B = 1: 
    A isEmpty or isNull , B !isEmpty or !isNull -> B
    A !isEmpty or !isNull , B isEmpty or isNull -> A
    A isEmpty or isNull , B isEmpty or isNull -> 0
    A !isEmpty or !isNull , B !isEmpty or !isNull
    esiste coppia (a,b) in A,B |
    	        (a,b) mulConsistent = F -> eccezione
    !(esiste coppia (a,b) in A,B |
    	        (a,b) mulConsistent = F) -> prodotto |
    		      prodotto e' prodotto di A e B

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


operator* scalare 

Sia A vettore ,B scalare input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, B = 1:  
    A isEmpty or isNull , B !isEmpty or !isNull -> eccezione
    A !isEmpty or !isNull , B isEmpty or isNull -> eccezione
    A isEmpty or isNull , B isEmpty or isNull -> 0
    A !isEmpty or !isNull , B !isEmpty or !isNull
    esiste coppia (a,b) in A,B |
    	        (a,b) mulConsistent = F -> eccezione
    !(esiste coppia (a,b) in A,B |
    	        (a,b) mulConsistent = F) -> prodotto |
    		      prodotto e' prodotto di A e B

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile



operator/ scalare 

Sia A vettore,B scalare in input 

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, B = 1: 
    A isEmpty or isNull , B !isEmpty or !isNull -> eccezione
    A !isEmpty or !isNull , B isEmpty or isNull -> eccezione
    A isEmpty or isNull , B isEmpty or isNull -> 0
    A !isEmpty or !isNull , B !isEmpty or !isNull
    esiste coppia (a,b) in A,B |
    	        (a,b) divConsistent = F -> eccezione
    !(esiste coppia (a,b) in A,B |
    	        (a,b) divConsistent = F) -> prodotto |
    		      prodotto e' prodotto di A e B

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


VettoreConcreto::Operazioni Booleane

Sia A,B input

metodi:
-> operator==
-> operator!= 
-> operator<   
-> operator<=  
-> operator>  
-> operator>= 

 
operator==  

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1,dim B = 1:
     
    A isNull, B isNull -> T
    A isEmpty, B isEmpty -> T
    A !isEmpty or !isNull , B isEmpty or isNull -> F
    A isEmpty or isNull , B !isEmpty or !isNull -> F
    A isEmpty or isNull , B isEmpty or isNull -> F
    esiste coppia (a,b) in A,B | a != b -> F
    !(esiste coppia (a,b) in A,B | a != b) -> T

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


operator!=  

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

    A isNull, B isNull -> F
    A isEmpty, B isEmpty -> F
    A !isEmpty or !isNull , B isEmpty or isNull -> T
    A isEmpty or isNull , B !isEmpty or !isNull -> T
    A isEmpty or isNull , B isEmpty or isNull -> T
    esiste coppia (a,b) in A,B | a != b -> T
    !(esiste coppia (a,b) in A,B | a != b) -> F


dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


operator<   

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1 ,dim B = 1
    A isNull, B isNull -> eccezione
    A isEmpty, B isEmpty -> eccezione
    A !isEmpty or !isNull , B isEmpty or isNull -> eccezione
    A isEmpty or isNull , B !isEmpty or !isNull -> eccezione
    A isEmpty or isNull , B isEmpty or isNull -> eccezione
      esiste coppia (a,b) in A,B | a >= b -> F
      !(esiste coppia (a,b) in A,B | a >= b) -> T


dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


operator<=  

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1 ,dim B = 1
    A isNull, B isNull -> eccezione
    A isEmpty, B isEmpty -> eccezione
    A !isEmpty or !isNull , B isEmpty or isNull -> eccezione
    A isEmpty or isNull , B !isEmpty or !isNull -> eccezione
    A isEmpty or isNull , B isEmpty or isNull -> eccezione
      esiste coppia (a,b) in A,B | a > b -> F
      !(esiste coppia (a,b) in A,B | a > b) -> T


dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


operator>  

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile


dim A = 1 ,dim B = 1
    A isNull, B isNull -> eccezione
    A isEmpty, B isEmpty -> eccezione
    A !isEmpty or !isNull , B isEmpty or isNull -> eccezione
    A isEmpty or isNull , B !isEmpty or !isNull -> eccezione
    A isEmpty or isNull , B isEmpty or isNull -> eccezione
      esiste coppia (a,b) in A,B | a <= b -> F
      !(esiste coppia (a,b) in A,B | a <= b) -> T


dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


operator>= 

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile


dim A = 1 ,dim B = 1
    A isNull, B isNull -> eccezione
    A isEmpty, B isEmpty -> eccezione
    A !isEmpty or !isNull , B isEmpty or isNull -> eccezione
    A isEmpty or isNull , B !isEmpty or !isNull -> eccezione
    A isEmpty or isNull , B isEmpty or isNull -> eccezione
      esiste coppia (a,b) in A,B | a < b -> F
      !(esiste coppia (a,b) in A,B | a < b) -> T

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile

VettoreConcreto::Operazioni Ulteriori

Sia A input

metodi:

-> isEmpty(virtuale) 
-> getRowNumber (virtuale)
-> getElementNumber(virtuale) 
-> isNull(virtual)

isEmpty(virtuale)

Sia A input

dim A= 0 :
impossibile

dim A = 1 :
A isNull -> eccezione
A !isNull, numero elementi > 0 -> F
A !isNull, numero elementi == 0 -> T

dim A > 1 :
impossibile


getRowNumber(virtuale)


dim A = 0:
    impossibile

dim A = 1:
    A isNull -> eccezione
    A isEmpty -> 0
    !(A is Empty) -> n |
    	n e' numero elementi di Vettore

dim A > 1:
    -> impossibile


/////// DEFINIRE BB BOX DA QUI
/////// DEFINIRE BB BOX DA QUI
/////// DEFINIRE BB BOX DA QUI
/////// DEFINIRE BB BOX DA QUI
/////// DEFINIRE BB BOX DA QUI
/////// DEFINIRE BB BOX DA QUI
/////// DEFINIRE BB BOX DA QUI
/////// DEFINIRE BB BOX DA QUI
/////// DEFINIRE BB BOX DA QUI




getElementNumber(virtuale) 

isNull(virtual)


VettoreConcreto::Operazioni Proprie

sia A input

metodi:
-> (T = Razionale) reduceAll
-> (T = Intero) powerAll 
-> (T = Double) fractionalAll

reduceAll(virtuale)

dim A = 0:
    impossibile

dim A = 1:
    A isEmpty -> eccezione
    !(A isEmpty) -> A' |
    A' <-> A ridotto ai minimo per ogni suo elemento

dim A > 2:
    impossibile:

powerAll(virtuale)

dim A = 0:
    impossibile

dim A = 1:
    A isEmpty -> 0
    !(A isEmpty) -> potenza |
    	potenza e' somma di ogni elemento di A elevato al quadrato,
	potenza < LIMITE_SUP
	se potenza >= LIMITE_SUP -> eccezione

dim A > 2:
    impossibile


fractionalAll(virtuale)

dim A = 0 :
    impossibile

dim A = 1:
    A isEmpty -> 0
    !(A isEmpty) -> fractional |
    	fractional e' somma di parte frazionaria di ogni
	elemento di A,
	fractional e' < LIMITE_SUP
	se fractional >= LIMITE_SUP -> eccezione // improbabile

dim A > 1 :
    impossibile


FINE OPERAZIONI VETTORE CONCRETO

////////////////////////////////
////////////////////////////////
////////////////////////////////



MatriceConcreta



MatriceConcreta


MatriceConcreta::Operazioni Algebriche

metodi


-> operator+ 
-> operator- 
-> operator* 
-> operator* scalare 
-> operator/ 


operator+  

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, B = 1: 
    A isEmpty = T, B isEmpty = T -> eccezione
    dim A = 1, B isEmpty = T -> eccezione
    A isEmpty = T , B = 1 -> eccezione
    addConsistent = F -> eccezione
    addConsistent = T -> somma A,B

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile
    

operator- 

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, B = 1: 
    A isEmpty = T, B isEmpty = T -> eccezione
    dim A = 1, B isEmpty = T -> eccezione
    A isEmpty = T , B = 1 -> eccezione
    subConsistent = F -> eccezione
    subConsistent = T -> differenza A,B 

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile
    

operator* 

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, B = 1: 
    A isEmpty = T, B isEmpty = T -> eccezione
    dim A = 1, B isEmpty = T -> eccezione
    A isEmpty = T , B = 1 -> eccezione
    mulConsistent = F -> eccezione
    mulConsistent = T -> prodotto A,B
    
dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


operator* scalare 

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, B = 1: 
    A isEmpty = T, B isEmpty = T -> eccezione
    dim A = 1, B isEmpty = T -> eccezione
    A isEmpty = T , B = 1 -> eccezione
    mulConsistent = F -> eccezione
    mulConsistent = T -> prodotto A,B

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile



operator/ scalare 

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, B = 1: 
    A isEmpty = T, B isEmpty = T -> eccezione
    dim A = 1, B isEmpty = T -> eccezione
    A isEmpty = T , B = 1 -> eccezione
    divConsistent = F -> eccezione
    divConsistent = T -> divisione A,B

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


MatriceConcreta::Operazioni Booleane

Sia A,B input

metodi:
-> operator==
-> operator!= 
-> operator<   
-> operator<=  
-> operator>  
-> operator>= 


operator==  

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A isEmpty = T, B isEmpty = T:
    eccezione
dim A = 1, B isEmpty = T:
    eccezione
dim A isEmpty = T , B = 1:
    eccezione

dim A = 1, dimB = 1:
    A == B -> T 
    !(A == B) -> F

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


operator!=  

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A isEmpty = T, B isEmpty = T:
    eccezione
dim A = 1, B isEmpty = T:
    eccezione
dim A isEmpty = T , B = 1:
    eccezione

dim A = 1, dimB = 1:
    A != B -> T
    !(A != B) -> F


dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


operator<   

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A isEmpty = T, B isEmpty = T:
    eccezione
dim A = 1, B isEmpty = T:
    eccezione
dim A isEmpty = T , B = 1:
    eccezione

dim A = 1, dimB = 1:
    A < B -> T
    !(A < B) -> F


dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


operator<=  

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A isEmpty = T, B isEmpty = T:
    eccezione
dim A = 1, B isEmpty = T:
    eccezione
dim A isEmpty = T , B = 1:
    eccezione

dim A = 1, dimB = 1:
    A <= B -> T
    !(A <= B) -> F


dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


operator>  

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, dimB = 1:

dim A isEmpty = T, B isEmpty = T:
    eccezione
dim A = 1, B isEmpty = T:
    eccezione
dim A isEmpty = T , B = 1:
    eccezione

dim A = 1, dimB 
    A > B -> T
    !(A > B) -> F


dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


operator>= 

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A isEmpty = T, B isEmpty = T:
    eccezione
dim A = 1, B isEmpty = T:
    eccezione
dim A isEmpty = T , B = 1:
    eccezione

dim A = 1, dimB = 1:
    A >= B -> T
    !(A >= B) -> F

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


MatriceConcreta::Operazioni Ulteriori


metodi:
-> transpose 
-> getRowNumber (virtuale) 
-> getColumnNumber (virtuale)
-> getElementNumber(virtuale)
-> isSquare(virtuale) 
-> isIdentity(virtuale) 
-> isUpperTriangular(virtuale) 
-> isLowerTriangular(virtuale)
-> isEmpty(virtuale) 



isEmpty(virtuale)

Sia A input

dim A = 0 :
impossibile

dim A = 1 :
A <-> null -> T
A <-> a -> F

dim A > 1 :
impossibile


transpose(virtuale)

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A is null -> eccezione
    A isEmpty -> 0
    A !(isEmpty), !(null) -> A' |
      A' e' trasposta di A

dim A > 1 :
    impossibile


getRowNumber(virtuale)

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A is null -> eccezione
    A isEmpty -> 0
    A !(isEmpty), !(null) -> n |
      n e' numero righe di A

dim A > 1 :
    impossibile


getColumnNumber(virtuale):

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A is null -> eccezione
    A isEmpty -> 0
    A !(isEmpty), !(null) -> n |
      n e' numero colonne di A

dim A > 1 :
    impossibile


getElementNumber(virtuale):

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A is null -> eccezione
    A isEmpty -> 0
    A !(isEmpty), !(null) -> n |
      n e' numero colonne * numero di righe di A

dim A > 1 :
    impossibile


isSquare(virtuale):

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A is null -> eccezione
    A isEmpty -> F
    A !(isEmpty), !(null), A getRowNumber == A getColumnNumber -> T,
    F altrimenti 

dim A > 1 :
    impossibile


isIdentity(virtuale):

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A is null -> eccezione
    A isEmpty -> F
    A !(isEmpty), !(null),
      (A isUpperTriangular), (A isLowerTriangular),
      (ogni elemento su diagonale = 1) -> T,
    F altrimenti
      

dim A > 1 :
    impossibile


isUpperTriangular(virtuale):

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A is null -> eccezione
    A !(isEmpty), !(null),
    A isSquare, ogni elemento sotto diagonale principale = 0 -> T
    F altrimenti

dim A > 1 :
    impossibile

isLowerTriangular(virtuale):

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A is null -> eccezione
    A !(isEmpty), !(null),
    A isSquare, ogni elemento sopra diagonale principale = 0 -> T,
    F altrimenti
