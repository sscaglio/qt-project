
// PROBABILE SINGLETON
// SUA ISTANZA CONTENUTA ALL INTERO DI OGNI CLASSE CHE DEVE
// ESEGUIRE CONTROLLO DI CONSISTENZA TRA OPERAZIONI ARITMETICHE

BoundChecker<T>

Membri interni

campi dati

-> upperBound(const)
   // LIMITE DEFINITO DA TIPO TEMPLATIZZATO PASSATO
-> lowerBound(const)
   // LIMITE DEFINITO DA TIPO TEMPLATIZZATO PASSATO


Interfaccia


metodi

-> costruttore((P1,P2),no default)
   // PRIMO PARAMETRO DEFINISCE LIMITE SUPERIORE
   // SECONDO PARAMETRO DEFINISCE LIMITE INFERIORE
-> addConsistent((P1,P2),const,no default) -> void
   // PRIMO E SECONDO PARAMETRO DEVONO ESSERE
   // CONTROLLATI PER CONSISTENZA SOMMA
   // NON STATICO -> DEVO ACCEDERE A SUOI MEMBRI PRIVATI
-> subConsistent((P1,P2),const,no default) -> void
   // PRIMO E SECONDO PARAMETRO DEVONO ESSERE
   // CONTROLLATI PER CONSISTENZA DIFFERENZA
   // NON STATICO -> DEVO ACCEDERE A SUOI MEMBRI PRIVATI
-> mulConsistent((P1,P2),const,no default) -> void
   // PRIMO E SECONDO PARAMETRO DEVONO ESSERE
   // CONTROLLATI PER CONSISTENZA PRODOTTO
   // NON STATICO -> DEVO ACCEDERE A SUOI MEMBRI PRIVATI
-> divConsistent((P1,P2),const,no default) -> void
   // PRIMO E SECONDO PARAMETRO DEVONO ESSERE
   // CONTROLLATI PER CONSISTENZA DIVISIONE
   // NON STATICO -> DEVO ACCEDERE A SUOI MEMBRI PRIVATI
