
MatriceConcreta


MatriceConcreta::Operazioni Algebriche

metodi


-> operator+ 
-> operator- 
-> operator* 
-> operator* scalare 



operator+  

sia A , B matrici in input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, B = 1:
    A isEmpty or isNull , B !isEmpty or !isNull -> B
    A !isEmpty or !isNull , B isEmpty or isNull -> A
    A isEmpty or isNull , B isEmpty or isNull -> 0
    A !isEmpty or !isNull , B !isEmpty or !isNull
    esiste coppia (a,b) in A,B |
    	        (a,b) addConsistent = F -> eccezione
    !(esiste coppia (a,b) in A,B |
    	        (a,b) addConsistent = F) -> somma |
    		      somma e' matrice somma di A e B

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile

operator- 

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, B = 1:

    A isEmpty or isNull , B !isEmpty or !isNull -> B
    A !isEmpty or !isNull , B isEmpty or isNull -> A
    A isEmpty or isNull , B isEmpty or isNull -> 0
    A !isEmpty or !isNull , B !isEmpty or !isNull
    esiste coppia (a,b) in A,B |
    	        (a,b) subConsistent = F -> eccezione
    !(esiste coppia (a,b) in A,B |
    	        (a,b) subConsistent = F) -> differenza |
    		      differenza e' matrice differenza di A e B

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile
    

operator* 

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, B = 1:
    A isEmpty or isNull , B !isEmpty or !isNull -> B
    A !isEmpty or !isNull , B isEmpty or isNull -> A
    A isEmpty or isNull , B isEmpty or isNull -> 0
    A !isEmpty or !isNull , B !isEmpty or !isNull
    esiste coppia (a,b) in A,B |
    	        (a,b) mulConsistent = F -> eccezione
    !(esiste coppia (a,b) in A,B |
    	        (a,b) mulConsistent = F) -> prodotto |
    		      prodotto e' matrice prodotto di A e B
    
dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


operator* scalare 

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1, B = 1: 
    A isEmpty or isNull , B !isEmpty or !isNull -> B
    A !isEmpty or !isNull , B isEmpty or isNull -> A
    A isEmpty or isNull , B isEmpty or isNull -> 0
    A !isEmpty or !isNull , B !isEmpty or !isNull
    esiste coppia (a,b) in A,B |
    	        (a,b) mulConsistent = F -> eccezione
    !(esiste coppia (a,b) in A,B |
    	        (a,b) mulConsistent = F) -> prodotto |
    		      prodotto e' matrice prodotto di A e B
    
dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile




MatriceConcreta::Operazioni Booleane

Sia A,B input

metodi:
-> operator==
-> operator!= 
-> operator<   
-> operator<=  
-> operator>  
-> operator>= 


operator==  

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1,dim B = 1:
     
    A isNull, B isNull -> T
    A isEmpty, B isEmpty -> T
    A !isEmpty or !isNull , B isEmpty or isNull -> F
    A isEmpty or isNull , B !isEmpty or !isNull -> F
    esiste coppia (a,b) in A,B | a != b -> F
    !(esiste coppia (a,b) in A,B | a != b) -> T

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile



operator!=  

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1,dim B = 1:
     
    A isNull, B isNull -> F
    A isEmpty, B isEmpty -> T
    A !isEmpty or !isNull , B isEmpty or isNull -> T
    A isEmpty or isNull , B !isEmpty or !isNull -> T
    esiste coppia (a,b) in A,B | a != b -> T
    !(esiste coppia (a,b) in A,B | a != b) -> F

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile



operator<   

Sia A,B input

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1 ,dim B = 1
    A isNull, B isNull -> eccezione
    A isEmpty, B isEmpty -> eccezione
    A !isEmpty or !isNull , B isEmpty or isNull -> eccezione
    A isEmpty or isNull , B !isEmpty or !isNull -> eccezione
      esiste coppia (a,b) in A,B | a >= b -> F
      !(esiste coppia (a,b) in A,B | a >= b) -> T


dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile

operator<=  

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile

dim A = 1 ,dim B = 1
    A isNull, B isNull -> eccezione
    A isEmpty, B isEmpty -> eccezione
    A !isEmpty or !isNull , B isEmpty or isNull -> eccezione
    A isEmpty or isNull , B !isEmpty or !isNull -> eccezione
      esiste coppia (a,b) in A,B | a > b -> F
      !(esiste coppia (a,b) in A,B | a > b) -> T


dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile



operator>  

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile


dim A = 1 ,dim B = 1
    A isNull, B isNull -> eccezione
    A isEmpty, B isEmpty -> eccezione
    A !isEmpty or !isNull , B isEmpty or isNull -> eccezione
    A isEmpty or isNull , B !isEmpty or !isNull -> eccezione
      esiste coppia (a,b) in A,B | a <= b -> F
      !(esiste coppia (a,b) in A,B | a <= b) -> T


dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


operator>= 

Sia A,B input

dim A = 0 , B = 0 
dim A = 1 , B = 0
dim A = 0 , B = 1:
    impossibile


dim A = 1 ,dim B = 1
    A isNull, B isNull -> eccezione
    A isEmpty, B isEmpty -> eccezione
    A !isEmpty or !isNull , B isEmpty or isNull -> eccezione
    A isEmpty or isNull , B !isEmpty or !isNull -> eccezione
      esiste coppia (a,b) in A,B | a < b -> F
      !(esiste coppia (a,b) in A,B | a < b) -> T

dim A > 1, B qualsiasi:
    impossibile
dim A qualsiasi , B > 1:
    impossibile


MatriceConcreta::Operazioni Ulteriori


metodi:
-> transpose 
-> getRowNumber  
-> getColumnNumber 
-> getElementNumber
-> isSquare 
-> isIdentity 
-> isUpperTriangular 
-> isLowerTriangular
-> isEmpty 
-> isNull


transpose

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A isNull -> eccezione
    A isEmpty -> 0
    A !isEmpty, A !isNull -> A' |
      A' e' trasposta di A

dim A > 1 :
    impossibile


getRowNumber

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A isNull -> eccezione
    A isEmpty -> 0
    A !isEmpty, A !isNull -> n |
      n e' numero righe di A

dim A > 1 :
    impossibile


getColumnNumber:

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A isNull -> eccezione
    A isEmpty -> 0
    A !(isEmpty), A !isNull -> n |
      n e' numero colonne di A

dim A > 1 :
    impossibile


getElementNumber:

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A is null -> eccezione
    A isEmpty -> 0
    A !isEmpty, A !isNull -> element |
      element = A getRowNumber * A getColumnNumber

dim A > 1 :
    impossibile


isSquare:

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A isNull -> eccezione
    A isEmpty -> F
    A !isEmpty, A !isNull, A getRowNumber == A getColumnNumber -> T,
    F altrimenti 

dim A > 1 :
    impossibile


isIdentity:

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A isNull -> eccezione
    A isEmpty -> F
    A !isEmpty, A !isNull,
      (A isUpperTriangular), (A isLowerTriangular),
      (ogni elemento su diagonale = 1) -> T,
    F altrimenti
      

dim A > 1 :
    impossibile


isUpperTriangular:

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A isNull -> eccezione
    A isEmpty -> F
    A !isEmpty, A !isNull,
    A isSquare, ogni elemento sotto diagonale principale = 0 -> T

dim A > 1 :
    impossibile

isLowerTriangular:

Sia A input

dim A = 0 :
    impossibile

dim A = 1:
    A isNull -> eccezione
    A isEmpty -> F
    A !(isEmpty), !(null),
    A isSquare, ogni elemento sopra diagonale principale = 0 -> T,



isEmpty

Sia A input

dim A = 0 :
    impossibile

dim A = 1 :
    A isNull -> eccezione
    sia n numero di elementi di A
    -> n != 0 -> F
    -> n = 0 -> T

dim A > 1 :
    impossibile



isNull

sia A input, 0 vettore vuoto

dim A = 0 :
    impossibile

dim A = 1 :
    A = 0 -> T
    A != 0 -> F

dim A > 1:
    impossibile


Operazioni Proprie

-> (T = Razionale) reduceAll
-> (T = Intero) powerAll 
-> (T = Double) fractionalAll


reduceAll

dim A = 0:
    impossibile

dim A = 1:
    A isNull -> eccezione
    A isEmpty -> 0
    !(A isNull or A isEmpty) -> A' |
    A' <-> A ridotto ai minimo per ogni suo elemento

dim A > 2:
    impossibile:

powerAll

dim A = 0:
    impossibile

dim A = 1:
    A isNull -> eccezione
    A isEmpty -> 0
    !(A isNull or A isEmpty) -> potenza |
    	potenza e' somma di ogni elemento di A elevato al quadrato,
	potenza < LIMITE_SUP
	se potenza >= LIMITE_SUP -> eccezione

dim A > 2:
    impossibile


fractionalAll

dim A = 0 :
    impossibile

dim A = 1:
    A isNull -> eccezione
    A isEmpty -> 0
    !(A isNull or A isEmpty) -> fractional |
    	fractional e' somma di parte frazionaria di ogni
	elemento di A,
	fractional e' < LIMITE_SUP
	se fractional >= LIMITE_SUP -> eccezione // improbabile

dim A > 1 :
    impossibile 