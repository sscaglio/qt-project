
gerarchia di tipi:

Calcolabile

contiene metodi astratti indipendenti dal tipo di calcolabile

contiene metodi:

Operazioni Ulteriori

-> distruttore  -> rende distruttori in gerarchia virtuale
-> isEmpty -> ritorna T sse oggetto e' vuoto, false altrimenti
-> getElementNumber -> ritorna numero di elementi appartenenti a oggetto
-> isNull -> ritorna T sse elemento e' null , F altrimenti


ComplessoAstratto

Complesso sottotipo di Calcolabile

contiene metodi astratti di calcolo propri di ogni Complesso 

contiene metodi:

Operazioni Ulteriori

-> getRowNumber  -> numero righe appartenenti al vettore  
-> isEmpty -> true sse elemento
   passato e' nullo
-> getElementNumber -> numero di elementi appartenenti a oggetto
-> isNull -> ritorna T sse elemento e' null , F altrimenti

ComplessoConcreto

implementazione per tipi Razionale,Intero,Double

implementazione concreta e templatizzata di metodi appartenenti a vettoreAstratto

implementazione metodo aggiuntivo reduceAll(T = Razionale) 
implementazione metodo aggiuntivo powerAll(T = intero) 
implementazione metodo aggiuntivo fractionalAll(T = double)

contieneMetodi:

Operazioni Algebriche

-> operator+  -> somma tra 2 vettori
-> operator-  -> differenza tra 2 vettori
-> operator*  -> prodotto di 2 vettori 
-> operator* scalare  -> prodotto di scalare per Complesso
-> operator/ scalare  -> divisione di Complesso per scalare

Operazioni Booleane

-> operator==  -> true sse
   2 vettori sono uguali , false altrimenti
-> operator!=  -> true sse
   2 vettori sono diversi , false altrimenti
-> operator<   -> true sse
   primo vettore minore del secondo, false altrimenti
-> operator<=  -> true sse
   primo vettore minore o uguale del secondo ,false altrimenti
-> operator>  -> true sse
   primo vettore maggiore di secondo ,false altrimenti
-> operator>=  -> true sse
   primo vettore maggiore o uguale di secondo,false altrimenti 

   
Operazioni Ulteriori

-> getRowNumber  -> ritorna numero righe appartenenti al vettore  
-> getElementNumber -> ritorna numero di elementi appartenenti a oggetto
-> isEmpty -> true sse elemento
   passato e' nullo
-> isNull -> ritorna T sse oggetto e' null , F altrimenti

Operazioni Proprie
-> (T = Razionale) reduceAll -> riduce ai minimi termini ogni elemento Complesso
-> (T = Intero) powerAll -> ritorna T tc T e' somma di Potenza di ogni elemento appartenente a vettore
-> (T = Double) fractionalAll -> ritorna T tc T e' somma di parteFrazionaria di ogni elemento di Complesso 


MatriceAstratta

matrice sottotipo di Calcolabile

contiene metodi astratti di calcolo propri di ogni matrice

contiene metodi:


Operazioni Ulteriori

-> getRowNumber  -> ritorna il numero di righe che compongono matrice
-> getColumnNumber  -> ritorna il numero di colonne che compongono matrice
-> getElementNumber  -> ritorna il numero di elementi che compongono la matrice
-> isSquare  -> ritorna true sse righe di matrice sono uguali a colonne, false altrimenti
-> isIdentity  -> ritorna true sse matrice e' matrice identita', false altrimenti
-> isUpperTriangular  -> ritorna true sse matrice e' matrice triangolare superiore , false altrimenti
-> isLowerTriangular  -> ritorna true sse matrice e' matrice triangolare inferiore , false altrimenti
-> isEmpty -> ritorna T sse oggetto e' vuoto, false altrimenti
-> isNull -> ritorna T sse oggetto e' null , F altrimenti

MatriceConcreta

implementazione per tipi Razionale,Intero,Double

T = Razionale,Intero,Double

implementazione concreta di metodi appartenenti a supertipo

implementazione metodo aggiuntivo reduceAll(T = Razionale) 
implementazione metodo aggiuntivo powerAll(T = intero) 
implementazione metodo aggiuntivo fractionalAll(T = double)

contiene metodi:

Operazioni Algebriche

-> operator+  -> somma tra 2 matrici
-> operator- -> differenza tra 2 matrici
-> operator*  -> ritorna matrice risultato del prodotto tra le matrici passate
-> operator* scalare  -> ritorna Matrice ottenuto da
   prodotto di scalare per Matrice
-> operator/ scalare -> ritorna Matrice ottenuto da
   divisione per scalare di Matrice

Operazioni Booleane

-> operator== -> ritorna true sse oggetti sono uguali per ogni elemento che li compone ,false altrimenti
-> operator!= -> negazione di uguaglianza

-> operator<   -> ritorna true sse primo matrice < secondo , false altrimenti
-> operator<=  -> ritorna true sse primo matrice <= secondo , false altrimenti

-> operator>  -> ritorna true sse primo matrice > secondo , false altrimenti
-> operator>=  -> ritorna true sse primo matrice >= secondo , false altrimenti

Operazioni Ulteriori

-> transpone   -> ritorna matrice trasposta rispetto alla matrice originale
-> getRowNumber  -> ritorna il numero di righe che compongono matrice
-> getColumnNumber -> ritorna il numero di colonne che compongono matrice
-> getElementNumber -> ritorna il numero di elementi che compongono la matrice
-> isSquare -> ritorna true sse righe di matrice sono uguali a colonne, false altrimenti
-> isIdentity -> ritorna true sse matrice e' matrice identita', false altrimenti
-> isUpperTriangular -> ritorna true sse matrice e' matrice triangolare superiore , false altrimenti
-> isLowerTriangular -> ritorna true sse matrice e' matrice triangolare inferiore , false altrimenti
-> isEmpty -> ritorna true sse matrice e' vuota , false altrimenti
-> isNull -> ritorna T sse oggetto e' null , F altrimenti

Operazioni Proprie

-> (T = Razionale) reduceAll -> riduce ai minimi termini ogni elementoComplesso
-> (T = Intero) powerAll -> ritorna T tc T e' somma di Potenza di ogni elemento
   appartenente a vettore
-> (T = Double) fractionalAll -> ritorna T tc T e' somma di parteFrazionaria
   di ogni elemento di Complesso


PolinomioAstratto

Polinomio sottotipo di Calcolabile

contiene metodi astratti propri di ogni polinomio

contiene metodi:

Operazioni Ulteriori

-> isEmpty -> ritorna T sse oggetto e' vuoto, false altrimenti
-> getElementNumber -> ritorna numero di elementi appartenenti a oggetto
-> isNull -> ritorna T sse oggetto e' null , F altrimenti
-> maxDegree -> ritorna il grado massimo del polinomio


PolinomioConcreto


implementazione per tipi Razionale,Intero

PolinomioConcreto sottotipo di PolinomioAstratto

implementazione concreta di metodi supertipo

implementazione metodo aggiuntivo (T = intero) powerAll
implementazione metodo aggiuntivo (T = razionale) reduceAll


Operazioni Algebriche

-> operator+ -> ritorna polinomio somma di 2 polinomi passati
-> operator- -> ritorna polinomio differenza di 2 polinomi passati
-> operator*  -> ritorna polinomio prodotto di 2 polinomi passati

-> operator* scalare  -> ritorna polinomio prodotto dato da Polinomio
   e scalare passato
-> operator/  -> ritorna polinomio divisione di 2 polinomi passati
-> operator/ scalare -> ritorna polinomio divisione di polinomio
   per scalare passati

Operazioni Booleani

-> operator==  -> ritorna true sse oggetti sono
   uguali per ogni elemento che li compone ,false altrimenti
-> operator!=   -> negazione di uguaglianza

-> operator<   -> ritorna true sse primo polinomio < secondo , false altrimenti
-> operator<=  -> ritorna true sse primo polinomio <= secondo , false altrimenti

-> operator>  -> ritorna true sse primo polinomio > secondo , false altrimenti
-> operator>=  -> ritorna true sse primo polinomio >= secondo , false altrimenti


Operazioni Ulteriori

-> first  -> ritorna primo elemento di polinomio
-> rest -> ritorna resto degli elemento di polinomio

-> getElementNumber -> ritorna il numero di elementi di polinomio
-> maxDegree  -> ritorna il grado massimo del polinomio
-> isEmpty -> true sse elemento
   passato e' nullo
-> isNull -> ritorna T sse oggetto e' null , F altrimenti

Operazioni Proprie

-> (T = Razionale) reduceAll -> riduce ai minimi termini ogni elementoComplesso
-> (T = Intero) powerAll -> ritorna T tc T e' somma di Potenza di ogni elemento appartenente a vettore



BoundChecker<T>

classe templatizzata
contiene metodi utili al controllo di bound per ogni operazione possibile
contenuto in ogni classe Concreta 

contiene metodi:

-> addConsistent -> true sse
   elementi passati sono consistenti con operazione di somma, false altrimenti
-> subConsistent -> true sse
   elementi passati sono consistenti con operazione di sottrazione,false altrimenti
-> mulConsistent -> true sse
   elementi passati sono consistenti con operazione di prodotto,false altrimenti
-> divConsistent -> true sse
   elementi passati sono consistenti con operazione di divisione,false altrimenti
